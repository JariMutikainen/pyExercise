
About the Searching exercises:
    - I liked the fact that you had actually provided the lines of code 
    for reading in the contents of the input file 'dictionary.txt'.
    It speeded up getting started with the exercises. After all
    the purpose of these exercises is to learn to use the
    regexps in Python. From that point of view having to first figure out how
    to get the input data into the functions would have just been an
    unnecessary distraction from the intended focus. 

    - In the case of returning a list of all the 5-letter palindromes in
    a given input string I would have expected the regexp with back
    referencing to be the optimum of doing it. The regexp solution
    looks like this:

    def palindrome5(dictionary=dictionary):
        """Return a list of all five letter palindromes."""
        matches = re.finditer(r'\b(\w)(\w)\w\2\1\b', dictionary)
        return [m.group() for m in matches]

    However, one could argue, that a solution without back referencing
    (as shown below) would be easier to read/understand.

    def palindrome5(dictionary=dictionary):
        """Return a list of all five letter palindromes."""
        return [word for word in re.split(r'\W+', dictionary) 
                if len(word) == 5 and word == word[::-1]]

    It may be just a matter of taste though.



In general I found your video from pyCon2017 very thorough. Personally I liked 
the most the part in which you explained the concepts of 'greedyness' and
'non-greedyness' of the regexp pattern matching - and how to alter it.
I just never had had the patience to learn this detail of the pattern matching
before. Demonstrating on-the-fly the effect of adding '?' after '+', '*'
or '?' made it all absolutely clear to me now. So I thank you for that.



